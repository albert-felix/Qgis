# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DC_Shapefile
                                 A QGIS plugin
 Creates all DC shapefiles
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-17
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Albert Felix
        email                : albertfelixleo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QFileDialog, QAction, QMessageBox, QApplication
import qgis.core
from qgis.core import *
from qgis import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .DC_Shapefile_dialog import DC_ShapefileDialog
import os.path


class DC_Shapefile:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DC_Shapefile_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.dlg = DC_ShapefileDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&DC_Shapefile')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('DC_Shapefile', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        self.dlg = DC_ShapefileDialog()
        

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/DC_Shapefile/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('DC Shapefiles'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&DC_Shapefile'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def select_output_location(self):
        filename = QFileDialog.getExistingDirectory(self.dlg, "Select output folder", "/home")
        self.dlg.lineEdit.setText(str(filename))


    def run(self):
        """Run method that performs all the real work"""

        layers = self.iface.mapCanvas().layers()
        layer_list = []
        for layer in layers:
            layer_list.append(layer.name())
        self.dlg.road_box_raw.clear()
        self.dlg.road_box_raw.addItems(layer_list)
        self.dlg.road_box.clear()
        self.dlg.road_box.addItems(layer_list)
        self.dlg.conflation_box.clear()
        self.dlg.conflation_box.addItems(layer_list)
        self.dlg.lineEdit.clear()
        self.dlg.app_checkBox.setChecked(False)
        self.dlg.dir_checkBox.setChecked(False)
        self.dlg.name_checkBox.setChecked(False)
        self.dlg.rtnum_checkBox.setChecked(False)
        self.dlg.local_checkBox.setChecked(False)
        self.dlg.sublocal_checkBox.setChecked(False)
        self.dlg.overlap_checkBox.setChecked(False)

        self.dlg.pushButton.clicked.connect(self.select_output_location)


        def buffering():

            global conflationBufferLayer
            bufferLayerIndex = self.dlg.conflation_box.currentIndex()
            selectedBufferLayer = layers[bufferLayerIndex]
            bufferDistance = float(self.dlg.lineEdit_2.text())
            params = {'INPUT':selectedBufferLayer, 'DISTANCE':bufferDistance, 'SEGMENTS':5, 'END_CAP_STYLE':0, 'JOIN_STYLE':0, 'MITER_LIMIT':2, 'DISSOLVE':False, 'OUTPUT':'memory:conBuffer.shp' }
            conflationBuffer = processing.run("native:buffer", params)
            conflationBufferLayer = conflationBuffer['OUTPUT']


        def appending():

            selectedLayerIndex = self.dlg.road_box.currentIndex()
            selectedLayer = layers[selectedLayerIndex]
            selectedLayer.selectByExpression(""" "names" ILIKE '%}, {%' """)
            QgsVectorFileWriter.writeAsVectorFormat(selectedLayer,self.dlg.lineEdit.text()+'/appending.shp', "utf-8", driverName="ESRI Shapefile", onlySelected=True)

            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/appending.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def direction():

            roadIndex = self.dlg.road_box.currentIndex()
            roadLayer = layers[roadIndex]
            conflationBufferLayer.selectByExpression("""
                                        "names"  ILIKE '%southeast%' OR
                                        "names"  ILIKE '%northeast%' OR
                                        "names"  ILIKE '%south%' OR
                                        "names"  ILIKE '%north%' OR
                                        "names"  ILIKE '%east%' OR
                                        "names"  ILIKE '%west%'  OR
                                        "names"  ILIKE '%northeast%' OR
                                        "names"  ILIKE '%southwest%'
                                        """)
            bufferSelected = conflationBufferLayer.materialize(QgsFeatureRequest().setFilterFids(conflationBufferLayer.selectedFeatureIds()))
            roadLayer.selectByExpression("""
                                        "names"  Not ILIKE '%southeast%' AND
                                        "names"  Not ILIKE '%northeast%' AND
                                        "names"  Not ILIKE '%south%' AND
                                        "names" Not ILIKE '%north%' AND
                                        "names"  Not ILIKE '%east%' AND
                                        "names" Not ILIKE '%west%'  AND
                                        "names"  Not ILIKE '%northeast%' AND
                                        "names"  Not ILIKE '%southwest%'
                                        """)
            roadSelected = roadLayer.materialize(QgsFeatureRequest().setFilterFids(roadLayer.selectedFeatureIds()))


            params = {'INPUT': roadSelected, u'PREDICATE':[6], 'INTERSECT': bufferSelected, 'OUTPUT':self.dlg.lineEdit.text()+'/direction.shp'}
            processing.run("native:extractbylocation", params)

            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/direction.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def nameIsNull():

            roadIndex = self.dlg.road_box.currentIndex()
            roadLayer = layers[roadIndex]

            conflationBufferLayer.selectByExpression(""" "names" is not {}""".format(qgis.core.NULL))
            bufferSelected = conflationBufferLayer.materialize(QgsFeatureRequest().setFilterFids(conflationBufferLayer.selectedFeatureIds()))

            roadLayer.selectByExpression(""" "names" is {}""".format(qgis.core.NULL))
            roadSelected = roadLayer.materialize(QgsFeatureRequest().setFilterFids(roadLayer.selectedFeatureIds()))


            params = {'INPUT': roadSelected, u'PREDICATE':[6], 'INTERSECT': bufferSelected, 'OUTPUT':self.dlg.lineEdit.text()+'/name_null.shp'}
            processing.run("native:extractbylocation", params)

            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/name_null.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def rtnumIsNull():

            roadIndex = self.dlg.road_box.currentIndex()
            roadLayer = layers[roadIndex]

            conflationBufferLayer.selectByExpression(""" "routenums" is not {}""".format(qgis.core.NULL))
            bufferSelected = conflationBufferLayer.materialize(QgsFeatureRequest().setFilterFids(conflationBufferLayer.selectedFeatureIds()))

            roadLayer.selectByExpression(""" "routenums" is {}""".format(qgis.core.NULL))
            roadSelected = roadLayer.materialize(QgsFeatureRequest().setFilterFids(roadLayer.selectedFeatureIds()))


            params = {'INPUT': roadSelected, u'PREDICATE':[6], 'INTERSECT': bufferSelected, 'OUTPUT':self.dlg.lineEdit.text()+'/rtnum_null.shp'}
            processing.run("native:extractbylocation", params)

            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/rtnum_null.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def localNull():

            selectedLayerIndex = self.dlg.road_box.currentIndex()
            selectedLayer = layers[selectedLayerIndex]
            selectedLayer.selectByExpression(""" "roadclass" = 'local' AND "names" is {} AND "routenums" is {} """.format(qgis.core.NULL,qgis.core.NULL))
            QgsVectorFileWriter.writeAsVectorFormat(selectedLayer,self.dlg.lineEdit.text()+'/local_null.shp', "utf-8", driverName="ESRI Shapefile", onlySelected=True)
            
            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/local_null.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def sublocalSpLimit():

            selectedLayerIndex = self.dlg.road_box.currentIndex()
            selectedLayer = layers[selectedLayerIndex]
            selectedLayer.selectByExpression(""" "roadclass" = 'sublocal' AND "speedlimit" is not {} """.format(qgis.core.NULL))
            QgsVectorFileWriter.writeAsVectorFormat(selectedLayer,self.dlg.lineEdit.text()+'/sublocal_splimit.shp', "utf-8", driverName="ESRI Shapefile", onlySelected=True)

            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/sublocal_splimit.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def overlap():

            selectedLayerIndex = self.dlg.road_box.currentIndex()
            roadSelected = layers[selectedLayerIndex]
            provider = roadSelected.dataProvider()
            provider.createSpatialIndex()
            params = {'INPUT' : roadSelected, u'PREDICATE': [7], 'INTERSECT' : roadSelected, 'METHOD': 0}
            processing.run("native:selectbylocation", params)
            QgsVectorFileWriter.writeAsVectorFormat(roadSelected,self.dlg.lineEdit.text()+'/overlap.shp', "utf-8", driverName="ESRI Shapefile", onlySelected=True)

            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/overlap.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def classChange():

            rawIndex = self.dlg.road_box_raw.currentIndex()
            rawRoad = layers[rawIndex]
            rawRoadSelected = rawRoad.materialize(QgsFeatureRequest().setSubsetOfAttributes(['plid','roadclass'], rawRoad.fields()))
            finalIndex = self.dlg.road_box.currentIndex()
            finalRoad = layers[finalIndex]
            finalRoadSelected = finalRoad.materialize(QgsFeatureRequest().setSubsetOfAttributes(['plid','roadclass','lastmodi_1'], finalRoad.fields()))
            finalRoadSelected.setName('final')

            vJoin = QgsVectorLayerJoinInfo()
            vJoin.setJoinFieldName('plid')
            vJoin.setTargetFieldName('plid')
            vJoin.setUsingMemoryCache(True)
            vJoin.setJoinLayer(finalRoadSelected)

            rawRoadSelected.addJoin(vJoin)
            rawRoadSelected.selectByExpression(""" "roadclass" != "final_roadclass" """)
            QgsVectorFileWriter.writeAsVectorFormat(rawRoadSelected,self.dlg.lineEdit.text()+'/class_change.shp', "utf-8", driverName="ESRI Shapefile", onlySelected=True)
            
            addLayer = self.iface.addVectorLayer(self.dlg.lineEdit.text()+'/class_change.shp',"","ogr")
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode = root.findLayer(addLayer.id())
            myLayerNode.setCustomProperty("showFeatureCount",True)


        def completed():

            completed_message = QMessageBox()
            completed_message.setText("Completed")
            completed_message.exec()

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        self.dlg.pushButton.clicked.disconnect(self.select_output_location)
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            self.iface.messageBar().pushMessage("Running DC Queries, please wait...",  level=Qgis.Warning)
            QApplication.processEvents()

            if self.dlg.lineEdit_2.text():
                buffering()

            if self.dlg.app_checkBox.isChecked():
                appending()

            if self.dlg.dir_checkBox.isChecked():
                direction()

            if self.dlg.name_checkBox.isChecked():
                nameIsNull()

            if self.dlg.rtnum_checkBox.isChecked():
                rtnumIsNull()

            if self.dlg.local_checkBox.isChecked():
                localNull()

            if self.dlg.sublocal_checkBox.isChecked():
                sublocalSpLimit()
            
            if self.dlg.overlap_checkBox.isChecked():
                overlap()

            if self.dlg.classChange_checkBox.isChecked():
                classChange()

            completed()

